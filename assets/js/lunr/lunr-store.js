var store = [{
        "title": "TeamRedMiner&#58; Command Line Arguments and Options",
        "excerpt":"**    Usage: teamredminer [OPTIONS]   Options:   -a, –algo=ALGORITHM      Selects the mining algorithm.  Currently available: \t  ethash            (eth, etp, others) \t  etchash           (etc, alias for -a ethash –eth_variant_mode=etchash) \t  kawpow            (ravencoin) \t  autolykos2        (ergo) \t  verthash          (vtc) \t  nimiq             (nimiq) \t  lyra2z      \t  phi2              (lux, argoneum) \t  lyra2rev3   \t  x16r        \t  x16rv2      \t  x16s              (pgn, xsh) \t  x16rt             (gin) \t  mtp               (zcoin) \t  cuckatoo31_grin   (grin) \t  cuckarood29_grin  (grin) \t  cnv8        \t  cnr               (old monero) \t  cnv8_half         (stellite, masari) \t  cnv8_dbl          (x-cash) \t  cnv8_rwz          (graft) \t  cnv8_trtl         (old turtlecoin, loki) \t  cnv8_upx2         (uplexa) \t  cn_heavy          (classic CN heavy) \t  cn_haven          (haven) \t  cn_saber          (bittube) \t  cn_conceal        (conceal) \t  trtl_chukwa       (turtlecoin) \t  trtl_chukwa2      (turtlecoin)   -h, –help                Display this help message and exit.       –debug               Enables debug log output.       –disable_colors      Disables console output colors.       –force_colors        Forces console color output even if the terminal does not seem to support them.       –api_listen=IP:PORT  Enables the sgminer compatible api. IP:PORT is optional. If present, the IP:PORT combo                               decides the interface(s) and port to listen to. Default is 127.0.0.1:4028. For                               external access, use e.g. 0.0.0.0:4028. It’s also valid to only specify the                               port, e.g. 4029.       –cm_api_listen=IP:PORT Enables the claymore compatible api. IP:PORT is optional. If present, the IP:PORT combo                               decides the interface(s) and port to listen to. Default is 127.0.0.1:3333. For                               external access, use e.g. 0.0.0.0:3333. It’s also valid to only specify the                               port, e.g. 3334.       –cm_api_password=PSW Sets the required password for the CM compatible api interface.       –log_file(=FILENAME) Enables logging of miner output into the file specified by FILENAME.  If no filename                               is provided, the miner will log to trm__.log in the current                               working directory.  If the log file already exists, the miner will append.   -l, --log_interval=SEC    Set the time interval in seconds for averaging and printing GPU hashrates.                               SEC sets the interval in seconds, and must be &gt; 0.       --log_rotate=SZ[,CNT] Enables log rotation. The SZ value sets the log size after which a new log file will be                               created.  The SZ value supports the suffixes 'k', 'M', and 'G' and will multiply the                               value by 1024, 1048576, and 1073741824 respectively. The optional CNT value sets the                                maximum number of old log files to keep.  For example the option '--log_rotate=4M,16'                               will cause the miner to switch to a new log file once the current log file exceeds                                4194304 bytes in size, and the miner will keep the last 16 such files and delete                                older ones.       --short_stats         Disables the full gpu state output in each hashrate output, like it was before 0.7.10.       --dev_location=LOC    Selects a specific location for the dev fee connection. Only use this if you see                               continuous dev fee connection issues reported by the miner. The connection                               management normally works well in all locations. Available options are:                               world     - Anywhere in the world except for mainland China.                               cn        - Mainland China.                               non-gcp   - Countries with blocked access to Google Services (e.g. Iran, Cuba).       --enable_compute      (Windows only) Enables compute mode and disables crossfire on necessary gpus.       --long_timestamps     Enables microsec timestamps in the logs instead of seconds only.       --restart_gpus        (Windows only) Restarts all configured gpus before mining, i.e. disable+enable PCI device.       --uac                 (Windows only) Enable privilege escalation when the miner runs tasks like restarting gpus.                               You can always avoid this by running the miner directly as Administrator.  This will                               trigger the standard Windows escalation prompt, so you have to be available to click 'Yes'.                               If this is not enabled, tasks that require Administrator privileges will fail when the                               miner is running under a basic user account.       --high_score          Enables printouts of the top 15 shares found since miner start in the stats output.                               Note: this might not be enabled for all algos.       --allow_dup_bus_ids   Allows multiple gpus using the same pci bus id.  This should only be used for Radeon Pro Duo                               cards and similar hardware, it's normally an indication of a broken OpenCL environment.   Pool config options:   -o, –url=URL             Sets the pool URL.  Currently stratum+tcp and stratum+ssl URLs are supported.                               Each additional time this option is specified will start a new pool config.                               Per-pool options (such as -u, -p) will need to be explicitly specified                               again for each new pool.  (See the example start_multipool.sh/bat file)                               The multi-pool strategy for the miner is set with the –pool_strategy option.   -u, –user=USERNAME       Sets the username for pool authorization.   -p, –pass=PASSWORD       Sets the password for pool authorization.       –pool_force_ensub    Forces an extranonce subscribe request for supported pools unknown to the miner.       –pool_no_ensub       Prevent miner from sending extranonce subscribe request to the pool.       –pool_broken_rpc     Tells the miner to only allow a single outstanding rpc request on the pool                               connection.  This is a work-around for pools that violate the json rpc                               specification regarding rpc IDs.       –pool_ratio=RATIO    Sets the hashrate ratio between pools when using multiple pools with the the                                ‘load_balance’ or ‘quota’ pool strategies (see –pool_strategy).  By default all                               pools use the ratio value 1.  For example, using this option with a value of 2 on                                just one pool will make that pool receive twice the hashrate as the other pools                                since their ratio will still be the default value of 1.       –pool_debug          Logs all pool traffic.   Global pool options:       –pool_connect_TO=SEC Set the time-out for attempting to connect to a pool. SEC is the time to wait in                               seconds. Default is 10.       –pool_rpc_TO=SEC     Set how long the miner will wait for an unanswered RPC to the pool.  After this                               time, the miner will reconnect to the pool.  SEC is the time to wait in seconds.                               Default is 60.       –pool_max_rejects=N  If a pool rejects N shares in a row, the pool connection is reset. This is to prevent                               against pools that invalidates mining sessions without disconnecting the user.                               Default value is 5.       –pool_share_limit_ms=N  If a pool takes longer than N ms to accept or reject a share, kill the current                               connection and reconnect.  This is intended for pools that often get issues with                               some of their servers, but reconnecting means being load-balanced to a different and                               hopefully better server.  Default value is no timeout.       –pool_strategy=STRAT Sets the strategy for selecting pools when running with multiple pools.  The available                               values are: priority, load_balance, quota, and min_epoch.  The default is priority.                                priority: The miner will use pools in the order they are listed, only moving on                                  to the next pool if the previous cannot establish a connection.                                load_balance: The miner will evenly balance the hashrate across all currently                                 connected pools.  The ratio of hashrate between pools can be set with –pool_ratio.                               quota: The miner will evenly balance the total hashes completed across                                  all pools.  If a pool disconnects and later reconnects, the miner will move                                  hashrate to the pool until the total hashes for each pool is balanced.                                  The ratio of hashrate between pools can be set with –pool_ratio.                               min_epoch: ETH + ZIL switching strategy.  The miner will always mine the lowest epoch                                 among all connected pools, and in case of a tie, the first connected pool.                                 Therefore, specify your ETH mining pool as the first/primary pool, then the ZIL pool                                 as the second pool.  You can also use ‘eth_zil’ as the name for this strategy.       –no_ntime_roll       Prevents the miner from rolling ntime in the block header, only using the value                               provided by the pool. This needs to be enabled for some pools when mining x16rt.       –no_stale_submit     Prevents the miner from submitting shares that are not for the most current pool job.   GPU options:       –platform=INDEX      Sets the index of the OpenCL platform to use. If not specified, platform will                               be auto-detected. Linux with multiple platforms is only supported using no                               –platform arg but instead adding –bus_reorder.   -d, –devices=DEVLIST     Sets gpu devices to use from detected list. DEVLIST should be a comma-                               separated list of device indices, e.g. -d 0,1,2,4.  If not specified, all                               devices on the platform(s) will be used.  NOTE: by default the devices are ordered                               by pcie bus ordering. Use –list_devices to show indices.       –init_style=1/2/3    Specified the init style (1 is default):                               1: One gpu at the time, complete all before mining.                               2: Three gpus at the time, complete all before mining.                               3: All gpus in parallel, start mining immediately.       –pcie_fmt=FORMAT     Sets print format for pcie bus numbers.  The accepted values for FORMAT are                               either ‘hex’ or ‘dec’.  The default is dec for windows and hex for linux.       –bus_reorder         Reorders the detected or specified devices after their pcie bus id.  If no                               platform is specified, devices will be collected from all detected AMD OpenCL                               platforms.  Note: As of version v0.7.0 this is the default behavior.       –opencl_order        Orders the detected or specified devices in the order OpenCL presents them.       –list_devices        Lists the available devices for the detected or specified platform and exits                               immediately.  Bus reordering will be implemented in the displayed order.       –nr_cu_override=X,Y,… Overrides the nr compute units per gpu as presented by the OpenCL API. This                               is primarily useful for Vega 64s flashed with 56 biosed and where the driver is                               reporting 56 CU instead of the true count.  Provide a comma-separated list of the                               override CU count per gpu as value for the argument.  You can skip gpus and do not                               need to provide values for all gpus in the rig.  Example for a mixed rig of two Vegas                               at index 1 and 3 and two other gpus: –nr_cu_override=,64,,64.  You can verify your                               argument by also adding –list_devices before mining.   Fan control options (BETA feature):       –fan_control(=CFG1,CFG2,…)  This argument enables gpu fan control by the miner.  TRM supports                               auto-adjusting the gpu fan speed(s) based on core, junction and/or mem temp.                               We also support setting a static fan speed in percent.                             Each gpu type has a fan configuration that will be used by default.  We support                           both overriding the default configuration per gpu type as well as setting a                           specific config per gpu in the rig.                            A fan config consists of (max) six values, separate by the ':' (colon) char.  The values                           are: core target temp, junction target temp, mem target temp, initial fan speed in                           percent, min fan speed in percent, max fan speed in percent.  Any value can be left empty.                           These are a few examples:                           ::70:50:25   Target mem temp to 70C, start fan at 50% speed, min fan speed 25%.                           55::::20:80  Target core temp to 55C, start fan at default configuration's speed,                                        always keep fan between 20% and 80%.                           55::75:80    Adjust fan so that core temp is &lt;= 55C and mem temp is &lt;= 75C, start                                        fan at 80%.                           :::100       Set static fan speed to 100%, never adjust based on temps.                            The fan configuration used for a gpu is derived in the following precedence order:                           1. The --fan_control argument was passed a list of configurations and included an                              entry for gpu X.                           2. The default fan configuration for this gpu type was overridden with a                              --fan_default_&lt;type&gt;=... parameter.                           3. Use the built-in default fan configuration for this gpu type.                            In the list above, if the chosen configuration is missing the start value for the fan                           the setting from the next configuration is used.                            NOTE: fan support is a beta feature and will not work better than the support the                           drivers provide.  For example, many times the drivers under linux don't allow forcing a                           fan to 100% using the sysfs pwm support.    --fan_default_polaris=CFG Set the default config used for all Polaris gpus (450/460/550/560/470/480/570/580/590).                           The built-in default is 55:::50 for 55C core temp and fan starting at 50%.                           Note: this setting is also reused for Tonga gpus.   --fan_default_vega=CFG    Set the default config used for all Vega gpus (Vega 56/Vega 64).                           The built-in default is 55::70:50 for 55C core temp, 70C mem temp and fan at 50%.   --fan_default_vega2=CFG   Set the default config used for all Radeon VII gpus.                           The built-in default is 70::75:80 for 70C core temp, 75C mem temp and fan at 80%.   --fan_default_navi=CFG    Set the default config used for all Navi (Navi10).                           The built-in default is 60::80:70 for 60C core temp, 80C mem temp and fan at 70%.   --fan_default_big_navi=CFG  Set the default config used for all Big Navi (Navi21).                           The built-in default is 50:::70 for 50C core temp and fan at 70%. The reason for                           not including mem temp is a missing sensor in the Windows ADL library.   --fan_debug               Enable log printouts related to adjustments.   Watchdog options:       –no_gpu_monitor      Disables the ADL (Windows) or sysfs (Linux) GPU monitor for temperature and                               fan speed.       –temp_limit=TEMP     Sets the temperature at which the miner will stop GPUs that are too hot.                               Default is 85C.       –temp_resume=TEMP    Sets the temperature below which the miner will resume GPUs that were previously                               stopped due to temperature exceeding limit.  Default is 60C.       –watchdog_script(=X) Configures the gpu watchdog to shut down the miner and run the specified platform                               and exits immediately. The default script is watchdog.bat/watchdog.sh in the                               current directory, but a different script can be provided as an optional argument,                               potentially with a absolute or relative path as well.       –watchdog_test       Tests the configured watchdog script by triggering the same action as a dead gpu                               after ~20 secs of mining.       –watchdog_disabled   Forces the watchdog to not execute. Can be used to disable the watchdog in mining os                               that always run with the watchdog enabled.   Ethash options:       –eth_config=CONFIG   Manual ethash configuration for the miner.  CONFIG must be in the form [M][L].                               The [M] value selects the mode which can be ‘A’,’B’, or ‘C’.                               The ‘B’ mode uses additional memory and will only work on 8+GB cards.                               The ‘C’ mode uses additional memory and will only work on 16+GB cards, such as the VII, with                               a correctly configured system.  See the ETHASH_TUNING_GUIDE.txt for more details.                               The [L] value selects the intensity and it’s range will depend on the GPU architecture.                               Both values are optional, but if [L] is specified, [M] must also be specified.                               Example configs: –eth_config=A                                                –eth_config=B750                               CONFIG can also be a comma separated list of config values where each is                               applied to each GPU. For example: –eth_config=A,B750,,A288                               Any gpu that does not have a specific config in the list will use the first                               config in the list.       –eth_variant_mode=X  This argument controls activation of the ethash changes for ETC from epoch 390 as described                               in ecip-1099. The following modes are available:                               pool      - Default mode. Only activates if the pool sends an algo flag containing etchash.                                           Once this flag is seen, all pool jobs will be assumed to be etchash unless another.                                           algo flag containing ethash is received.                               etchash   - Etchash mode. Epoch &gt;= 390 will be assumed to be etchash, lower epochs ethash. Pool                                           algo flags are not used.                               deduce    - Ignore pool algo flags and only apply a heuristics based on the current system time                                           and known heights and times for ETC and ETH. This mode should work as a generic                                           approach when ETH reaches epoch 390 in Jan 2021. The system clock needs to be correct.                                           It should also handle any profit switching setups that switch freely between ethash and                                           etchash jobs by proxying underlying pools.                               auto      - As long as the pool hasn’t passed an algo flag, use deduce mode. When an algo flag                                           is seen, switch to pool mode.                               ethash    - Forced ethash mode. Never apply ecip-1099.                               force_etc - Forced etchash mode. Always apply ecip-1099 rules. Use for ETC testnet mining.       –eth_aggr_mode       Enables automatic use of the ‘B’ mode for all Polaris 8GB cards, unless they have a                               different config provided by the –eth_config argument.  This is the same thing as                                manually setting all Polaris 8GB gpus in the rig to ‘B’ mode using –eth_config.                               For most gpus, this adds 0.1-0.2 MH/s of hashrate.  NOTE: 20-25% of rigs becomes less                               stable in this mode which is the reason it isn’t the default mode.  If you experience                               dead gpus, you should remove this argument and run the gpus in the ‘A’ mode.        –eth_stratum_mode=MODE Sets a fixed stratum mode for ethash pools.  By default the miner will attempt                               to automatically determine the type of stratum the pool supports and use that mode.                               This automatic detection can be overriden by specifying this option.  The MODE can be                               set to one of the following options: stratum, nicehash, ethproxy.        –eth_worker          Set the worker id that will be sent to pool.  This only applies to pools with ethproxy                               stratum mode.       –eth_epoch           Tests a specific ethash epoch. NOTE: you still need to provide a pool as if you were mining,                               but no shares will be submitted. Simulated mining only.       –eth_alloc_epoch=N   Allocates enough memory for the given epoch from the start.  The miner will try to allocate more                               if it needs to later during mining.  It’s recommended for rigs with one or more 4GB cards to test                               and set this to the max possible value to avoid reallocations at epoch switches.  Optimal Linux                               rigs should be able to handle epoch 380, Windows rigs a little less (373-374).       –eth_dag_buf=X,Y,… The miner can allocate a single or dual buffers for the DAG.  For now, the default is DUAL buffers, which                               matches the behavior in all recent TRM releases.  However, a single buffer is slightly better, leading                               to a small power save for all gpu types.  Only recent drivers support single large allocations larger                               than 4GiB, typically from Adrenalin 20.9.1 and amdgpu-pro 20.x. The miner can automatically use single                               buffer mode when possible using this argument, as well a force single or dual buffers per gpu.                               Supported values are A(uto), S(ingle), D(ual).  You can enumerate a comma-separated list for all gpus                               in the rig, or a single value for all gpus.  A gpu that does not have a value in the comma-separated list                               will use the first value.  Hence, to enable auto mode for all gpus, pass –eth_dag_buf=A                               NOTE: 4GB gpus will be forced to use dual buffers.        –eth_big_mode_adjust=X,Y,…  When using B- or C-modes, the miner runs better the more vram it can allocate.  Unfortunately the                               drivers aren’t accurate reporting how much memory it’s possible to allocate, especially on Windows.                               The miner will use a safe conservative number of 256MiB (Linux) and 512MiB (Windows) as an offset from                               the available vram size.  If you want change this number, you can do so using this argument by providing.                               a comma-separated list with values for one or more gpus.  Values for gpus not running B/C-mode will be                               ignored.  If a gpu doesn’t have a value in the list, the first provided value is used instead.                               The allowed interval is [-64, 2048]. The higher number, the less vram is allocated on the gpu.       –eth_4g_max_alloc=X,Y,…  This argument allows mining on 4GB gpus after they no longer can store the full DAG in vram.                               You pass either the max epoch to allocate memory for, or the raw nr of MB to allocate.  You can                               provide a single value that applies to all 4GB gpus in the rig, or use a comma-separated list for                               specifying different values per gpu.  Values for non-4GB gpus are ignored.       –eth_dag_slowdown=N  Slows down the DAG generation.  Pass a single digit 0-9. 0 means no slowdown (&lt;= 0.7.9 behavior),                               1 means minimal slowdown, 9 means max.  Default value: 4 for a slight slowdown.       –eth_stagger         Enables staggering of gpus when building a new DAG.  This is more lean on PSUs that don’t like                               going from 0-100% load on all gpus at the same time.        –eth_no_stagger      Disables –eth_stagger.  Already the default behavior from 0.7.18.  Argument kept for backwards                               compatibility only.       –eth_ramp_up         Adds ramping up the intensity on all gpus after a DAG build, gpu disable/enable or network outage.                               Can help rigs with crashes right between the DAG build and starting mining.       –eth_no_ramp_up      Disables –eth_ramp_up.  Already the default behavior from 0.7.18.  Argument kept for backwards                               compatibility only.       –eth_direct_abort    Uses a different mechanism to abort ongoing gpu jobs.  Recommended for Vegas in ROCm environments                               to minimize stale shares.  Will apply to Vega and Polaris gpus in the rig only.        –eth_dag_alloc_patch Some motherboards with outdated bios can see hw errs typically on the first or last gpu in the system.                               Use this argument to force a patched dag allocation strategy that most often solves the issue.                               Upgrading your bios often solves the issue as well.       –eth_hashwatch(=M,M) Defines a min/max watchdog hashrate in MH/s expected when gpus are hashing.  If a GPU falls outside                               of this range for too long it will be considered faulty and the watchdog will be triggered.  The                               default min/max values are 2 MH/s and 150 MH/s.  To activate with default values, use                               –eth_hashwatch.  To set your own values, use e.g. –eth_hashwatch=1.25,60.  The same range is used                               for all gpus in the rig.  A negative value for one side disables it, e.g. use –eth_hashwatch=-1,1000                               to handle gpu resets that result in huge fake hashrates but no minimum check.       –eth_dag_cache(=EPOCH) Enables saving eth DAGs from jobs with different epochs to prevent having to rebuild them in the                               future if jobs with the old epochs are received again.  At most one DAG will be saved if GPU memory                                space allows.  This is useful for switching pools such as eth+zil mining.  If you want to prebuild a                               certain epoch immediately at startup, add the optional value. Eth+zil switching miners should use                               –eth_dag_cache=0.  Only ethash (and not etchash) epochs can be prebuilt at this time.       –eth_dag_cache_resv=MEM  Sets the amount of GPU memory the miner will attempt to leave unused when running with DAG caching                               enabled (see –eth_dag_cache).  The argument MEM is the amount of memory to leave unused in                               mebibytes.  The default value is 256.       –eth_dag_cache_verify    Enable dag cache read and verification after a finished dag build.  This will detect situations                               where the dag cache had bit errors and the resulting dag is partially broken.  We have seen this                               happen increasingly on Vegas as the dag has grown bigger.  When detected, a new buffer will be                               allocated for the dag cache and the dag build restarted.       –eth_no_4gb_kernels      Disable the ethash 4GB kernels and always use the regular kernels that assume the DAG will always                               fit in available vram on all gpus.  This is useful when mining ETC or ethash coins at lower epochs                               than ETH since the regular kernels have a better performance profile.       –eth_micro_delay=VAL     Navi gpus only: adds a delay (measured in microseconds) when reenqueueing work on the gpu(s).                               Weaker PSUs driving many gpus can sometimes not handle the “slew rate” when multiple gpus happen to                               reenqueue work at exactly the same time.  Setting this to e.g. 32 will smoothen out the transition                               from no load to 100% load enough to lower the slew rate on such rigs.  The typical indication of this                               issue is hard hangs where the rig becomes unresponsive requiring a power cycle to reboot, but it can also                               be regular gpu crashes.  Valid values are 1-128. Not using this argument means no delay, value zero.   Progpow options:       –prog_config=CONFIG  Manual progpow configuration for the miner.  CONFIG must be in the form [M][L].                               The [M] value selects the mode which can be either ‘A’ or ‘B’.                               The ‘B’ mode typically results in better performance but is only available for                               Vega on linux and Navi (linux or windows).                               The [L] value selects the intensity and it’s range will depend on the GPU architecture.                               Both values are optional, but if [L] is specified, [M] must also be specified.                               Example configs: –prog_config=A                                                –prog_config=B750                               CONFIG can also be a comma separated list of config values where each is                               applied to each GPU. For example: –prog_config=A,B750,,A288                               Any gpu that does not have a specific config in the list will use the first.       –prog_height=VALUE   Sets a fixed block height for progpow algorithms for benchmarking purposes.                               Note that using this option needs a pool connection but will not submit shares.       –prog_strict         Forces miner to always generate strictly accurate kernels.  By default the miner will                               generate relaxed kernels that use less computation power but can result in                                occasional invalid shares.       –prog_dag_slowdown=N  Slows down the DAG generation.  Pass a single digit 0-9.  0 means no slowdown (&lt;= 0.7.9 behavior),                               1 means minimal slowdown, 9 means max.  Default value: 4 for a slight slowdown.       –prog_stagger         See –eth_stagger.       –prog_ramp_up         See –eth_ramp_up.       –prog_no_stagger      See –eth_no_stagger.       –prog_no_ramp_up      See –eth_no_ramp_up.   Cryptonight options:       –rig_id              Set the rig identifier that will be sent to the pool. This is only used for                               cryptonight pools.       –cn_config=CONFIG    Manual cryptonight configuration for the miner.  CONFIG must be in the form                               [P][I0][M][I1][:xyz], where [P] is an optional prefix and [:xyz] is an                               optional suffix.  For [P], only the value of ‘L’ is supported for low-end                               GPUs like Lexa/Baffin.  [I0] and [I1] are the thread intensity values normally                               ranging from 1 to 16, but larger values are possible for 16GB gpus.  [M] is the                               mode which can be either ‘.’, -‘, ‘+’ or ‘’.  Mode ‘.’ means that the miner                               should choose or scan for the best mode.  Mode ‘’ both a good default more and                               should be used if you mine on a Vega 56/64 with modded mem timings.  The                               exceptions to this rule are small pad variants (cnv8_trtl and cnv8_upx2), they                               should still use ‘+’. For Polaris gpus, only the ‘-‘ and ‘+’ modes are available.                             NOTE: in TRM 0.5.0 auto-tuning functionality was added, making manual configuration                           of the CN config modes unnecessary except for rare corner cases.  For more info,                            see the tuning docs and how-to documents bundled with the release.                                                       Example configs: --cn_config=15*15:AAA                                            --cn_config=14-14                                            --cn_config=L4+3                           CONFIG can also be a comma separated list of config values where each is                           applied to each GPU. For example: --cn_config=8-8,16+14:CBB,15*15,14-14                           Any gpu that does not have a specific config in the list will use the first                           config in the list.   --no_cpu_check        Disables cpu verification of found shares before they are submitted to the pool.                           Note: only CN algos currently supports cpu verification.   --no_lean             Disables the CN lean mode where ramp up threads slowly on start or restart after                           network issues or gpu temp throttling.    --no_interleave=DEVS  Lists gpu devices where CN thread interleave logic should be not be used.                            The argument is a comma-separated list of devices like for the -d option.                            Use this argument if some device(s) get a worse hashrate together with a lot                           of interleave adjust log messages.    --alloc_patch=DEVS    Lists gpu devices that loses hashrate between TRM v0.4.5 and later versions. With this                            argument a simpler mem allocation strategy is used, and the old (higher) hashrate should                           be restored. Auto-tuning mode can still be used.   --auto_tune=MODE      Enable the auto-tune mode upon startup. Only available for CN variants. MODE must                            be either NONE, QUICK or SCAN. The QUICK mode checks a few known good configurations                           and completes within 1 min. The SCAN mode will check all possible combos and will                           run for 20-30 mins. Setting MODE to NONE disable the auto-tune feature. The default                           mode is QUICK.    --auto_tune_runs(=N)  Executes multiple runs for the auto tune, each time decreasing the unit of pads used -1                           in one of the threads (15+15 -&gt; 15+14 -&gt; 14+14 -&gt; 14+13 -&gt; ...). You can specify the                           explicit nr of runs or let the miner choose a default value per gpu type (typically 3-4).   --auto_tune_exit      If present, the miner will exit after completing the auto-tuning process. This is helpful                           when you want to scan for optimal settings and then use the resulting command line arg                           printed by the miner.   --allow_large_alloc   If present, and when the driver indicates there is enough GPU vram available, the miner                           will be more aggressive with the initial memory allocation. In practice, this option                           means that Vega GPUs under Linux will start the auto-tuning process at 16*15 rather                           than 16*14 or 15*15.   MTP options:       –allow_all_devices   Some algos can’t be mined on e.g. 4GB gpus. Those gpus will be disabled automatically                               by the miner. This argument overrides this logic and allows mining on all specified                               or detected devices.   X16* options:       –hash_order=VALUE    Sets a fixed hash order for algorithms like x16r for benchmarking purposes.                               Note that using this option needs a pool connection but will not submit shares.                               The standard benchmark hash order for x16r is –hash_order=0123456789abcdef.   Nimiq options:       –nimiq_worker=VALUE  Sets the worker/device name for nimiq to pass to the pool(s).       –nimiq_no_proxy      Disables the automatic Nimiq proxy executed as a separate process. This means that the                               host and port passed to the miner must be pointing to a proxy.       –nimiq_proxy=VALUE   Overrides the default path to the Nimiq proxy. The default is trm_nimiq_proxy-win.exe.                               and trm_nimiq_proxy-linux in the current miner director.       –nimiq_port=VALUE    Overrides the default local port (4444) used for the Nimiq proxy. This can be used if your                               system is already using port 4444 for some other tcp/ip service.   Verthash options:       –verthash_file=FILE  Sets the filename to be used to load/store the verthash data file.  If this option is                               specified when the verthash algo is used, the miner will attempt to load the verthash                               data from the file.  If the file does not exist, the miner will generate the verthash                               data and then save it in the file for future use.  If this option is not specified the                               miner will generate the verthash data in system memory on every start.       –verthash_max_uploads=N  Some motherboards have issues with all gpus in the rig uploading the verthash table                               at the same time.  This argument limits the number of concurrent gpus that are uploading                               the table at the same time at startup.  Allowed values are 1-32.  The default value is 4.   Autolykos2 options:       –autolykos_mem_adjust=N  Sets the amount of memory in MiB that the miner should leave unused when allocating                               GPU buffers for autolykos.  The default value is 384 on linux and 512 on windows.  For GPUs                               with displays attached, the default is increased by 512.  If dual mining with ZIL, the                                default value is increased by 1024.  The option can also be provided with a comma separated                               list of values where each value is applied to each GPU.  If an empty value is specified                               in the list, the default will be used for that GPU.  If a value is not specified for a GPU                               it will use the first value in the list.  For example:                                     –autolykos_mem_adjust=256,512,,256       –autolykos_slowdown=N  Adds a slowdown of the pad build process.  Valid values are 0-100. The default is 0, no                               slowdown.   ZIL dual mining options:       –zil_start or –zil  Starts the ZIL dual mining config.  Between this and the –zil_end marker, all arguments are                               applied to the ZIL mining rather than the primary algo.  It’s expected that the primary algo                               has been set up in earlier arguments.  The intention is that you can add a –zil … –zil_end                               configuration to any working TRM configuration algo and things will work out of the box.                               This argument automatically sets a range of default settings you want to use for ZIL:                                - Cached copy of the ZIL epoch 0 DAG.                                - Adjustment of memory allocated for the primary algo to fit the ZIL DAG.                                - Choose ethash A-mode for the ZIL mining.                                - Use the standard faster kernels for 4GB gpus since the DAG is max 1GB.                             The minimal working setup is to only provide a ZIL pool that is ok with the miner ignoring                           the primary coin jobs and only mines during the ZIL windows.  This is an example for ezil.me:                           --zil -o stratum+tcp://eu.ezil.me:5555 -u &lt;eth wallet&gt;.&lt;zil wallet&gt;.&lt;worker name&gt; -p x --zil_end                            For more info, read the ZIL dual mining guide packaged with the TRM release.    --zil_end             Marks that we're done with the ZIL mining config and all following arguments are for the primary                           algo.  This argument isn't strictly necessary, but should be included for mining distros since                           the user has no guarantee what arguments will be added automatically at the end of the command                           line by the distro.   --stats_mode=single/dual  When adding ZIL dual mining, the stats output will by default be duplicated to add info for                           the ZIL mining.  Some contexts might get confused by this if they are parsing the TRM outut or                            log files.  To switch to the default output, add --stats_mode=single.  ","categories": ["documentation"],
        "tags": ["TeamRedMiner"],
        "url": "https://teamredminer.info/documentation/arguments/",
        "teaser": "https://teamredminer.info/assets/images/thumbs/500x300.png"
      },{
        "title": "TeamRedMiner&#58; changelog",
        "excerpt":"**    changelog  Changes in v0.8.1.1   Release notes:     Patched v0.8.1 with new devices ids for 6700XT support.   Changes in v0.8.1   Release notes:     General: basic Big Navi support added (ethash, kawpow, mtp, nimiq supported algos).          See the ETHASH_TUNING_GUIDE.txt for a short section on Big Navis.           Driver support missing on Windows for fan control and mem temp.   Ethash: display gpus now use A-mode by default to prevent failed allocation and low hashrates.   Stats: handling of negative temperatures under Linux.   Eth+zil: added new pool strategy ‘min_epoch’ for dual pool connection switching (see start_zil_eth.bat/.sh example script).   Changes in v0.8.0   Biggest release in a long while with rewritten ethash kernels and new mining modes for all gpu types!   Users are highly(!) recommended to take a few minutes to read the 0.7-to-0.8 migration guide and the new ethash tuning guide. Key highlights:           Polaris: Efficiency and slight hashrate increase. B-mode reintroduced for added hash. B-mode must be enabled with –eth_aggr_mode or –eth_config=Bxxx.            Vega 56/64: greatly improved base kernel for efficiency. New B-mode that can shave off additional 1-2W on top of the A-mode kernel. B-mode must be enabled manually with –eth_config (–eth_aggr_mode does not apply). Tuning numbers have changed - do NOT keep your old static –eth_config values.            Radeon VII: huge boost with its new C-mode but requires a special Linux setup. Can now do 100 MH/s on most air cooled VIIs. See tuning guide.            5700/5700XT: can shave off as much as 8-9W(!) of power using the new B-mode and dropping core clk+voltage. B-mode now the default mining mode. Unless you retune your core clk+voltage you will see a tiny power draw increase instead and not benefit from the upgrade, so read the migration guide.            5600XT: new B-mode has a much smaller effect. A-mode remains the default mining mode. See new tuning guide for more details.            The dag cache is NOT compatible with the new B/C-modes. ETH+ZIL switchers have to choose between caching the epoch 0 dag and using the new mining modes.            Ethash 4GB kernels NOT rewritten in this release, performance remains the same as in 0.7.x.            See the migration guide for hashrate and power draw comparisons between 0.7.21 and 0.8.0.       Release notes:     Ethash: VII kernel rewrite and new C-mode with boost feature (see guide).   Ethash: Navi kernel slight optimization and new B-mode for lower core clock and power.   Ethash: Vega kernel rewrite and new B-mode for lower core clock and power.   Ethash: Polaris kernel rewrite and new B-mode for slightly higher perf.   Ethash: added share processing timeout and default for Binance pool (see –pool_share_limit_ms).   Claymore API: fixed leak that stopped serving requests after 32k api calls.   Claymore API: added password support (see –cm_api_password).   Logging: added log rotation support (see –log_rotate).   Logging: log files now contain the miner welcome message so the version is stored.   Kawpow: now mining ok at MiningPoolHub even though their seedhash is broken.   Fan control: added min/max fan speed range (see –fan_control).   General: added argument to turn off duplicate pci bus id filtering (see –allow_dup_bus_ids).   Changes in v0.7.23   None - discarded as internal test version.   Changes in v0.7.22   Highlights:   1) NAVI KERNEL REWRITE! Over the last month we’ve been working on new kernels. The first one released is for Navi. The main feature is lower power consumption, hashrate will remain about the same but depends somewhat on clocks. NOTE: please let the miner retune any existing –eth_config arguments for all Navi gpus, the new values will be significantly lower.   2) Claymore API now supported, meaning you can use EthMan to monitor TRM rigs.   Release notes:     Ethash: Kernel rewrite for Navi.  Should now be more stable and use less power.  Vega/Polaris still in the works.   General: Slightly reworked init procedure again to address some rigs running better on &lt;= 0.7.18 than &gt;= 0.7.19.   General: Added Claymore compatible API, see the –cm_api_listen option.   Changes in v0.7.21   Quick release that addresses situations where Ethash with capped DAG on 4GBs would crash after 5-10 mins when running at 4078-4080MB.   Release notes:     Ethash: improved probability for high (4078-4080MB) ethash 4GB capped allocation running stable over time.   Changes in v0.7.20   Highlights:   ETH is now approaching the start of the 4GB death with the upcoming switch to epoch 382. TRM was the first miner to add support for mining with 4GB gpus with a partial DAG, here called “extended mining”. However, it has always required manual configuration. This release adds a default conservative cap at 4072MB for DAG storage on 4GB gpus for out-of-the-box execution of the miner. For maximum performance, miners are still advised to manually tune their rig(s) with the –eth_4g_max_alloc argument. Most rigs runs stable with a higher value than 4072, which makes a significant difference for upcoming ETH epochs.   For more detailed instructions, our Ethash 4GB guide has also been updated and is available at https://github.com/todxx/teamredminer/blob/master/doc/ETHASH_4GB_HOWTO.txt   Release notes:     Ethash: added default capped DAG allocation for 4GBs at 4072MB (see –eth_4g_max_alloc).   Ethash: bugfix for crashes using –eth_dag_cache on 4GB gpus.   Changes in v0.7.19   Highlights:   1) Ethash solo-miner share high-score list added, use –high_score to enable.   2) Ethash single buffer dag for a small power save. Only available on recent drivers and should in theory always be an improvement. It is not verified 100% stable yet and therefore not the default in this version. Enable with –eth_dag_buf=A to test.   3) Miner gpu initialization procedure rewritten. The init procedure should now hopefully be much more stable, especially on Navis in general and even more so for 5600(XT)s.   Release notes:     General: added adjustable ratio support for quota and load_balance pool strategies (see –pool_ratio).   General: rewrote the miner init procedure to be more stable in general.   General: fixed issue where output blocking could cause mining work to stop.   General: reduced main binary size.   Ethash: reintroduced single DAG buffer support for recent drivers allowing large single allocations (see –eth_dag_buf).   Ethash: added high score list of the 15 highest value shares found since start (see –high_score).   Ethash: small improvements in keeping the gpu busy over epoch switches.   Ethash: fixed bug that would cause deadlocks in rare occasions.   Ethash: bugfix - dag cache wasn’t enabled for 4GB gpus.   Changes in v0.7.18   1) Support for the ETC fork added. Run with “-a etchash” for easiest support, see “–eth_variant_mode” in the help for more info.   2) ETH+ZIL miners: add “–eth_dag_cache=0” to use a second dag cache and prebuild epoch 0 immediately at miner start.   3) Ethash miners relying on ramp-up and stagger for stability: the default mode of these tweaks has been changed to off. They now need to be enabled with –eth_ramp_up and –eth_stagger. While helping a number of rigs, these tweaks caused increased instability of others, making the choice of a good default mode difficult.   Release notes:     Added etchash support (see algo etchash and –eth_variant_mode).   Added dag cache support, mostly intended for eth+zil mining (see –eth_dag_cache).   Fixed hex char parsing in enable/disable submenu, can now work with &gt;= 10 gpus.   Changed the default for ethash ramp-up and staggering to false (see –eth_ramp_up and –eth_stagger).   Added check for broken win setups with duplicated opencl platforms and/or devices.   Changes in v0.7.17   Release notes:     BETA: Added fan control, see –help section or USAGE.txt. Enable with –fan_control.   Fixed deadlock bug that could happen when using multiple pools with the failover strategy.   Added option for not sending stale shares (see –no_stale_submit).   Added watchdog check for early gpu init hangs.   Added example watchdog scripts for win/linux.   Changes in v0.7.16c   BETA RELEASE - small fixes for Turtlecoin’s new algo chukwa2.   Release notes:     Chukwa2: fixed kernels loading for Radeon VII gpus.   Chukwa2: fixed mem footprint for 2GB gpus.   Changes in v0.7.16b   BETA RELEASE - adds Turtlecoin’s new algo chukwa2. Not tested as rigorously as other versions. Only use for the Turtlecoin fork.   NOTE: Navi gpus are NOT supported on chukwa2 for now. Support will be added if there’s sufficient interest.   Release notes:     Added algo trtl_chukwa2 for the Turtlecoin fork on 2020-10-22.   Changes in v0.7.15   Small bugfix release.   Release notes:     Ethash: fixed bug for ZIL (epoch 0) mining on 4GB gpus (bug appeared in 0.7.14).   Ethash: reverted to v0.7.10 kernels for stability purposes except for ROCm-based rigs.   Changes in v0.7.14   This release wraps up our work for 4GB gpus mining ethash. Linux 4GB are verified to mine up to and including epoch 381 on drivers 18.50/19.30/19.50/20.10. After that, we have added support for extended mining from epoch 382 and up. Extended mining is a trade-off between hashrate and being able to mine at all, gpus will lose additional hashrate for every extra epoch. Please see the Linux section in the ETHASH_4GB_HOWTO.txt for more details and instructions.   Release notes:     Ethash: verified Linux support for 4GB gpus up to and including epoch 381.   Ethash: added support for extended 4GB mining from epoch 382 and up.   Kawpow: cleaned up false hw errs for some block heights.   Changes in v0.7.13   1) Windows user with 4GB rigs - see the new guide ETHASH_4GB_HOWTO.txt for instructions.   Release notes:     Added better default Windows dag allocation strategy on 4GB gpus.   Added experimental support for resetting gpus before mining (Windows only).   Added argument for manual adjustment of 4GB dag allocation (see –eth_4g_alloc_adjust=X,Y,Z,…).   Added protection against broken dev servers with additional random server selection mechanism.   Changes in v0.7.12   1) Bugfix release: v0.7.11 could crash with rejected ethash shares.   Release notes:     Fixed print format bug on ethash rejected shares.   Changes in v0.7.11   1) Ethash additions: printing share diff in GH (always enabled), hashrate watchdog (see –eth_hashwatch). 2) Better debug support: –long_timestamps, –pool_debug. 3) We’ve found certain motherboard/bios combinations that due to kernel and/or driver bugs have issues with the first or last gpu in rigs. If you see excessive hw errors reported on a single gpu, and switching around gpus still always generates errors in the first or last gpu, try using –eth_dag_alloc_patch.   Release notes:     Added DAG allocation patch under linux for certain mobo/bios combinations (see –eth_dag_alloc_patch).   Added ethash hashrate watchdog (see –eth_hashwatch).   Added ethash abort mechanism for Vegas on ROCm (see –eth_direct_abort). Not useful in other contexts.   Added pool traffic debug (use –pool_debug).   Added print of share difficulty for ethash family algos. Unit is always GH.   Added microsec timestamp resolution in logs (use –long_timestamps).   Regression bug: argon2/chukwa was broken in 0.7.10, now working again.   Turned off compute mode checks for non-Polaris gpus.   Changes in v0.7.10   Release notes: 1) Ethash 4GB rigs, especially on win, should use –eth_alloc_epoch=N with N being the max epoch that the gpus can allocate. This will avoid DAG reallocation issues. 2) For Navi rigs having issues with eth+zil or Nicehash mining with frequent DAG switching, try using –eth_dag_slowdown=9.      Added default log filename (trm__.log)   Added ethash forced initial allocated epoch ( –eth_alloc_epoch=N). Note: HIGHLY recommended for 4GB rigs.   Added ethash family DAG build slowdown configuration (–eth_dag_slowdown=N, default value 4).   Added ethash family DAG build staggering across gpus (disable with –eth_no_stagger).   Added ethash family intensity ramp-up (disable with –eth_no_ramp_up).   Added option for forcing dev fee region (see –dev_location).   Added MTP for Navi gpus.   Added MTP ramp-up after pad rebuild.   Fixed error printouts on failed watchdog script execution on Linux.   Stats: now shows more clocks and temps, and also adds gpu state in hashrate prints (see –short_stats to disable).   Added checks for and enabling compute mode and disabling crossfire on Windows (see –enable_compute).   Changes in v0.7.9     Fixes for mixed rig mining on Linux.   Added –eth_epoch argument for easier epoch testing.   Added –eth_aggr_mode for automatic aggressive ‘B’ mode on Polaris 8GB gpus.   Added –watchdog_disable argument.   Changes in v0.7.8     Upgrade for the upcoming Haven hard fork (July 20, 2020).   Tiny Nimiq optimizations (1-2% max, mostly Vega and Navi).   Fixed CPU usage issue when redirecting stdin to /dev/null.   Fixed pool name returned by API for Nimiq.   Changes in v0.7.7     Added support for Nimiq Polaris/Vega (dumb mode only).   Integrated a Nimiq node.js network proxy into the miner.   Fixed Nimiq bug that could lose shares, especially against lower vardiff pools.   Fixed Nimiq bug that could cause duplicate shares on startup for low-diff pools.   Fixed regression bug for ethash Nicehash, correct stratum mode now used again.   Added support for Nimiq Navi.   Added support for icemining Nimiq solo mining mode (set -p m=solo).   Changes in v0.7.6     Fixed broken keyboard input in tmux+screen sessions (e.g. Hive OS).   Added support for 5500(xt).   Fixed Linux watchdog support for hard driver crashes (script was not executed).   Fixed kawpow nicehash extranonce support.   Changes in v0.7.5     Fixed broken optimizations for kawpow in 0.7.4.   Changes in v0.7.4     Increased ethash support on 4GB GPUs up to epoch 380-383   Implemented split ethash dag buffers for 8GB GPUs to support DAGs over 4GB   Kawpow optimizations (Navi +2.25%, Vega +1.25%, Polaris +0.25%)   Added gpu enable/disable API support.   Windows TDR detection/handling/warning.   Monitor detection on Windows/Linux with intensity adjustment.   Fix for ethash pool hashrate reporting stopping after network outage.   Changes in v0.7.3     Emergency patch for 4GB cards to handle a few more ETC epochs. A more complete patch is coming out shortly.   Changes in v0.7.2     Fixed kawpow dag build DEAD gpu issue on windows Adrenalin 2020 drivers.   Fixed Navi 5600(xt) support on windows.   Fixed mining on Vegas on older amdgpu-pro drivers.   Fixed ADL reporting of stats on windows for newer cards.   Changes in v0.7.1     Fixed issue with VII ethash/kawpow on windows.   Changes in v0.7.0     Added kawpow algo for Ravencoin.   Added Navi support for kawpow and ethash.   Changed device ordering to be pcie bus based by default, added –opencl_order option.   Fixed issue with –list devices not working without other args.   Reformatted help message to hopefully make it easier to read.   Added multipool example scripts.   Removed ssl/tls server name verification (was re-added with TLS SNI fix)   Fixed an unhandled signal bug that would cause rare crashes.   Fixed multi-pool API bug.   Changes in v0.6.1     Added pool failover and load balancing.   Added better error messages when failing to allocate eth DAG buffers.   Added server name for TLS SNI.   Added automatic setting for environment variables for 4GB GPUs.   Extended maximum length of usernames and passwords (for some merged mining setups).   Added report of pool stats.   Changed initial pool auto detect mode to eth proxy.   Various fixes for submitting hashrate to pools.   Changes in v0.6.0     Added ethash support.   Relaxed ssl/tls cert chain verification.   Changes in v0.5.9     Added x16rv2 for the upcoming Ravencoin fork.   Optimization work on x16r: +8-10% hashrate depending on clocks.   Optimization work on x16r: mem clock no longer as important.   Issue fix: kernels split into multiple binaries to fix linux amdgpu-pro driver issues.   Changes in v0.5.8     Added Chukwa-512 algo For Turtlecoin (trtl_chukwa).   Issue fix: kernels not loaded properly for Conceal.   Issue fix: added logic for pool reconnect on N rejected shares in a row (see –pool_max_rejects=N).   Changes in v0.5.7     Added CN conceal algo for Conceal (CCX).   Added cuckarood29 algo for grin.   Changes in v0.5.6     MTP improvements for Vega and Polaris (+1-3% hashrate, improved efficiency, esp Polaris)   Changes in v0.5.5     Added cuckatoo31 algo for grin.   Changes in v0.5.4     Fixed API bug for MTP, crashing when using Awesome Miner.   Small MTP improvements, mostly for Polaris.   Changes in v0.5.3     Added MTP algo for Zcoin/XZC (please read MTP_MINING.txt before mining).   Further small stabilization fixes for CN variants, primarily 4MB algos.   Changes in v0.5.2     Bugfix release only, no new added algos or features.   Fix for 1-2% degraded hashrate on Radeon VIIs in some scenarios.   Fix for Radeon VII allocation bug, causing hw errs.   Fix for allocation bug causing crashes for some drivers and gpus.   Changes in v0.5.1     Added better support for CN intensities 16*15, use –allow_large_alloc under Linux.   Added –no_ntime_roll for mining x16rt on e.g. bsod.pw.   Added Tonga device recognition.   Better error reporting for pool communication issues.   Changes in v0.5.0     Added cryptonight 4MB variants: heavy, haven and saber.   Added x16 algo suite: x16r, x16s, x16rt (both gin and veil).   Auto-tuning mode for all CN variants, see bundled guide.   Manual key-driven CN tuning mode available inside the miner.   Additional data in miner stats console output.   Watchdog now detecting single stuck thread when mining CN.   Fix: in rare cases, poolside hash for compute algos (lyra2z, phi2, lyra2rev3) only reached ~95% of expected value.   Changes in v0.4.5     Added cryptonight v8 upx2 for the uPlexa coin fork.   Reworked init procedure, added retry logic on comm errors.   Added section on temps to the CN_MAX_YOUR_VEGA guide.   Added a new howto MAP_YOUR_GPUS describing how to map gpus between miner/tools/registry.   Changes in v0.4.4     Added * mode specifically for modded timings on Vega GPUs.  Use with e.g. –cn_config=15*15.  This mode is now the default for Vegas.   Introduced slow start/ramp-up.  Threads increase their workload slowly at start or restart after e.g. a network outage.   Added interleave adjustment logic.  Readjusts the two threads per gpu over time to make sure they don’t gravitate and get stuck.   Added support for forcing colors (–force_color) for windows redirected consoles (git bash, cygwin, node.js).   Added hotkey menu system (show stats, enable/disable gpu).   Changes in v0.4.3     Added cryptonight v8 turtle (–algo cnv8_trtl) algo for coins such as turtle coin and loki.   Added support for running CN mining single-threaded using Y+0 configurations.   Changed the auto config mode for Radeon VII to L30+0 as a temporary setting.   Changes in v0.4.2     Added cryptonight v8 half (–algo cnv8_half) algo for coins such as stellite and masari.   Added cryptonight v8 double (–algo cnv8_dbl) algo for coins such as x-cash.   Added cryptonight v8 reverse waltz (–algo cnv8_rwz) algo for coins such as graft.   Added support for running devices on multiple OpenCL platforms.   Fixed more issues with console colors on older windows versions.   Added more cpu verification optimization for CN/R. CN/R cpu usage should decrease ~70%.   Changes in v0.4.1     Removed server name verification for SSL connections. (Pools like supportxmr now work with SSL)   Fixed bug causing GPUs to fail to initialize on some systems.   Fixed bug causing GPUs to only run one thread (but display 2x hashrate)   Fixed bug where having GPU_MAX_WORKGROUP_SIZE set too high would cause GPUs to crash.   Fixed bug where older windows versions would get no console output.   Added work-around for driver bug in linux amdgpu-pro drivers resulting in low pool-side hash for polaris cards in rare cases.   Added some cpu verification optimizations.  CN/R cpu usage should decrease about 15%.   Changes in v0.4.0     Added cryptonight R support.  (–algo cnr)   Added support for ssl/tls pool connections using the stratum+ssl:// prefix.   Added colors (and an option to disable them).   Slight performance increase for lyra2rev3 (~0.5%).   Fix for occasional crashes when pool disconnects.   Added more messages regarding not being connected to dev pool.   Changed printing to not block mining progress if stdout writes block.   Changes in v0.3.10     Slight performace improvement for Vegas on lyra2rev3   Pool stratum protocol work-arounds for some pools, fixing duplicate share error.   Changed handling of unrecognized pool rpcs to be ignored instead of causing a reconnect.   Fix for duplicate shares on 480/580/Vega56 cards with lyra2rev3.   Changes in v0.3.9     Added support for lyra2rev3 amdgpu-pro and windows.  ROCm support coming in later version.   Fixed API bug with not reporting dead GPUs   Changes in v0.3.8     Added support for fan speed and temperatures.   Added watchdog function for gpu init stuck, dead gpu, over-temp gpu, and non-responding pool.   Added new optional ‘L’ config prefix for low-end cards like lexa/baffin for a 10+% speed-up on some cards   Added an option for writing out a log file.   Added cycling through multi-entry dns records when connecting to pools.   Added a pool-connect timeout.   Added measurement and displaying of pool response times.   Added support for 80-byte headers for Phi2 algo (for non-LUX coins).   Slightly tuned the ‘+’ mode for polaris, some GPUs will show slight performance increase.   Fixed bug with API interface occasionally getting stuck.   Changes in v0.3.7     Redesigned GPU initialization, should now be less error prone.   Added clean shutdown to reduce driver/GPU crashes.   Added staggered GPU start-up to reduce GPU crashes.   Added CPU verification for CNv8 and associated –no_cpu_check option.   Fixed crash on pool authentication error.   Added –pool_broken_rpc work-around option for pools that violate json rpc spec.   Added option to reorder by PCIe bus numbers.   Added –list_devices option to show available devices.   Added changed stats formatting to indicate which numbers are accepted/rejected/hw-error shares.   Added uptime to stats.   Changes in v0.3.6     Added support for Rx550 cards (gfx804).   Improved stability on larger rigs, especially with weaker cpus.   Improved error reporting on failed initialization.   Changes in v0.3.5     Changed GPU initialization to be sequential by default and added –init_style option for faster init styles.   Fixed network buffer size issue preventing the use of very long usernames/passwords/rig_ids.   Added opencl platform auto-detection for AMD platforms when –platform is not specified.   Changes in v0.3.4     Added CryptoNight v8 (CNv2) support   Changed stats display to include pool hashrate and better formatting   Added parallel GPU initialization   Added output of submitted/accepted/rejected shares.   Changed hashrate reported to be full GPU hashrate (previously hashrate reported was after dev fee deduction)   Changes in v0.3.3     ROCm support reintroduced   API support based on the sgminer API   Improved GPU platform detection   PCIe bus id printed on startup and is available over API   Added option for periodic stats interval   Changes in v0.3.2     Added windows support/build   Added vega PAL driver support   Removed ROCm support (temporarily)   Removed libjansson dependency   Changes in v0.3.1     Fixed phi2 issues causing rejected shares and low pool-side hashrate.  ","categories": ["documentation"],
        "tags": ["TeamRedMiner"],
        "url": "https://teamredminer.info/documentation/changelog/",
        "teaser": "https://teamredminer.info/assets/images/thumbs/500x300.png"
      },{
        "title": "TeamRedMiner&#58; Setup - Readme [install] (2021)",
        "excerpt":"**    Download is available in the github releases section.   TRM discord server: https://discord.gg/RGykKqB   Below is a list of mining operating systems and management software that have built-in support for teamredminer:     MMPOS   SimpleMining OS   Hive OS   Minerstat   Awesome Miner   PiMP OS   RaveOS   This miner supports a range of algorithms.  Please see the list below for details.  The miner is configured via command line only, please run with the –help option to print a short help message for how to use the command line options.   This miner supports mining ethash with 4GB Polaris GPUs after epoch 381 on linux.  Please see the guide here   Algorithms   This miner includes the following algorithms and their respective dev fees:                  Algorithm       Fee                       Ethash on Polaris GPUs       0.75%                 Ethash on all other GPUs       1.0%                 Kawpow       2.0%                 Nimiq       2.5%                 Cryptonight R       2.5%                 Cryptonight v8 upx2       2.5%                 Cryptonight v8 turtle       2.5%                 Cryptonight v8 half       2.5%                 Cryptonight v8 double       2.5%                 Cryptonight v8 rwz       2.5%                 Cryptonight v8       2.5%                 Cryptonight heavy       2.5%                 Cryptonight haven       2.5%                 Cryptonight saber       2.5%                 Cryptonight conceal       2.5%                 Chukwa-512 (Turtlecoin)       2.5%                 Chukwa-1024 (Turtlecoin)       2.5%                 x16r       2.5%                 x16rv2       2.5%                 x16s       2.5%                 x16rt       2.5%                 MTP       2.5%                 Cuckatoo31       2.5%                 Cuckarood29       2.5%                 Lyra2rev3       2.5%                 Lyra2z       3.0%                 Phi2       3.0%           GPUs supported and tested:     Navi - RX 5700(XT)/5600(XT)/5500(XT) for supported algos in the table below.   Vega - RX Vega 64/56, Vega FE, Radeon VII (Vega 2)   Polaris - RX 580/480/570/470/560/460/550   Some algorithms are not supported on some GPU architectures and/or drivers.  Below is the compatiblity table:                          Navi       Vega       Polaris                       Ethash       Y       Y       Y                 Kawpow       Y       Y       Y                 Nimiq       Y       Y       Y                 Cryptonight R       N       L       L                 Cryptonight v8 upx2       N       L       L                 Cryptonight v8 turtle       N       L       L                 Cryptonight v8 half       N       L       L                 Cryptonight v8 double       N       L       L                 Cryptonight v8 rwz       N       L       L                 Cryptonight v8       N       L       L                 Cryptonight heavy       N       L       L                 Cryptonight haven       N       L       L                 Cryptonight saber       N       L       L                 Cryptonight conceal       N       L       L                 Chukwa-512       N       L       L                 Chukwa-1024       N       L       L                 x16r       N       Y       Y                 x16rv2       N       Y       Y                 x16s       N       Y       Y                 x16rt       N       Y       Y                 MTP       Y       Y       Y                 Cuckatoo31       N       Y       Y                 Cuckarood29       N       Y       Y                 Lyra2rev3       N       L       L                 Lyra2z       N       L       L                 Phi2       N       L       L           Support legend:     Y = Supported   N = Not supported   L = Limited support: algos are supported on windows and linux with amdgpu-pro drivers, not supported on ROCm drivers.   The miner reports GPU hash rates every 30 seconds.  These are the full GPU hash rates before dev fee deduction (your pool hashrate will be slightly lower).   The miner includes a read-only api based on the sgminer-5.5 API.  Both the json and text formats are supported.  For more details, we refer to the sgminer api documentation. The miner also includes a Claymore miner compatible API with support for a subset of the API.   For reporting bugs and/or for features requests, please open an issue on this project’s github issue tracker.   For example command lines please see the batch/shell scripts in the miner download packages. For command line options see the USAGE.txt file that comes with the miner.     ","categories": ["documentation"],
        "tags": ["TeamRedMiner"],
        "url": "https://teamredminer.info/documentation/setup/",
        "teaser": "https://teamredminer.info/assets/images/thumbs/500x300.png"
      },{
        "title": "Download TeamRedMiner  0.8.3 - AMD GPU Miner [2021]",
        "excerpt":" Get started with TeamRedMiner  \t\t \t\t\t \t\tVersion: 0.8.3  \t\tFile: *TeamRedMiner.exe,    \t\tSHA256: e8e775add50c67e1c6f6ca20db318f745e22b085afcbdf5634015e6ef91e8853  \t\t(Download for Linux)\t \t\t \t\t \t\t \t\t \t\tDownload Now (Windows x64) \t\t \t\t(mirror) \t\t \t       You can download TeamRedMiner 0.8.3 from here:   Download Now   Download (mirror)   Inside the archive you will find a file README.txt with installation instructions.   Make sure to replace the pool and wallet address by what you’re using in all files.        ","categories": ["download"],
        "tags": ["TeamRedMiner"],
        "url": "https://teamredminer.info/download/0.8.3/",
        "teaser": "https://teamredminer.info/assets/images/thumbs/500x300.png"
      },]
